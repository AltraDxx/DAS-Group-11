pet(3,2)
rep(3,2)
x <- rnorm(10)
ifelse(x<0,0,x)
help(ifelse)
x <- rnorm(1)
y <- rnorm(1)
ifelse(x < y,x <- y,y<- x)
x <- runif(1)
y <- runif(1)
ifelse(x < y,x <- y,y<- x)
#=====loop=====
x <- 1
for (i in 1:10)
x <- x/2 + 1/x
x
for (i in 1:3) print(i)
for(i in seq_along(x))
if(x[i]<0)
x[i] <- 0
x
help("seq_along")
x <- rnorm(10)
for(i in seq_along(x))
if(x[i]<0)
x[i] <- 0
x
for(i in 1:10)
if(x[i]<0)
x[i] <- 0
x
x <- rnorm(10)
for(i in 1:10)
if(x[i]<0)
x[i] <- 0
x
help("numeric")
n <- 1000
x <- numeric(n)
x
x[1] <- rnorm(1)
x
a <- rnorm(1)
a
a <- rnorm(1)
a
x <- rnorm(100)
x[sample(100,10)] <- NA
for(i in 1:length(x))
if(is.na(x[i]))
x[i] <- 0
y <- x[!is.na(x)]
#without loop
x
y
#=====nested loops=====
x <- seq(from=-3,to=3,length.out=50)
y <- seq(from=-3,to=3,length.out=50)
z <- matrix(nrow=length(x),ncol=length(y))
for(i in seq_along(x))
i <- 1
while(i<=3)
{
print(i)
i++
}
while(i<=3)
{
print(i)
i <- i+1
}
for(i in seq_along(x))
if(x[i]<0)
x[i] <- 0
x <- ifelse(x<0,0,x)
sample(10)
n <- 5
z <- numeric(n)
for (i in 1:n)
{
if(x[i]>x[j])
z[i] <- x[i]
else
z[i] <- y[i]
}
n <- 5
x <- sample(n)
y <- sample(n)
z <- numeric(n)
for (i in 1:n)
{
if(x[i]>x[j])
z[i] <- x[i]
else
z[i] <- y[i]
}
for (i in 1:n,j in 1:n)
for (i,j in 1:n)
x <- c(1,2,9)
y <- c(2,6,4)
z <- c(3,5,7)
ifelse(x<4, y, z)
x <- rnorm(10)
out <- numeric(length(x))
ifelse(x>0,x,-x)
corr_mat <- function(sigma){
rowcount <- nrow(sigma)
colcount <- ncol(sigma)
R <- matrix(nrow = rowcount,ncol = colcount)
for (i in 1:rowcount) {
for(j in 1:colcount){
if(i == j){
R[i,j] <- 1
}
else{
R[i,j] <- sigma[i,j]/sqrt(sigma[i,i]^2*sigma[j,j]^2)
}
}
}
return(R)
}
corr_mat(matrix(c(16,4.5,4.5,9),nrow = 2))
matrix(c(16,4.5,4.5,9),nrow = 2)
corr_mat <- function(sigma){
rowcount <- nrow(sigma)
colcount <- ncol(sigma)
R <- matrix(nrow = rowcount,ncol = colcount)
for (i in 1:rowcount) {
for(j in 1:colcount){
if(i == j){
R[i,j] <- 1
}
else{
R[i,j] <- sigma[i,j]/sqrt((sigma[i,i]^2)*(sigma[j,j]^2))
}
}
}
return(R)
}
corr_mat(matrix(c(16,4.5,4.5,9),nrow = 2))
correlation.matrix <- function(sigma){
sds <- sqrt(diag(sigma)) # Get vector of standard deviations R <- matrix(nrow=nrow(sigma), ncol=ncol(sigma))
for (i in 1:nrow(R)){ # For every entry of the matrix R ... for (j in 1:ncol(R)){
1
R[i,j] <- sigma[i,j] / (sds[i] * sds[j]) # ... set entry according to formula }}
R # Return R as result
}
}
sigma <- rbind(c(16, 4.5), c(4.5, 9))
correlation.matrix(sigma)
correlation.matrix <- function(sigma){
sds <- sqrt(diag(sigma))
R <- matrix(nrow=nrow(sigma), ncol=ncol(sigma))
for (i in 1:nrow(R)){
for (j in 1:ncol(R)){
R[i,j] <- sigma[i,j] / (sds[i] * sds[j])
}
}
R
}
sigma <- rbind(c(16, 4.5), c(4.5, 9))
correlation.matrix(sigma)
corr_mat <- function(sigma){
rowcount <- nrow(sigma)
colcount <- ncol(sigma)
R <- matrix(nrow = rowcount,ncol = colcount)
for (i in 1:rowcount) {
for(j in 1:colcount){
if(i == j){
R[i,j] <- 1
}
else{
R[i,j] <- sigma[i,j]/sqrt(sigma[i,i]*sigma[j,j])
}
}
}
return(R)
}
corr_mat(matrix(c(16,4.5,4.5,9),nrow = 2))
spending <- c(5, 4, 12, 7, 3, -12, 14, 11, 6, -2, 8, -1, 10, 17,-9)
boxplot(spending)
median(spending)
wilcox.test(spending, mu=0)
summary(spending)
wilcox.test(spending, mu=0)
sway <- c(19, 30, 20, 19, 29, 25, 21, 24, 25, 21, 17, 15, 14, 14, 22, 17)
group <- c(rep("E",8),rep("Y",8))
boxplot(sway)
wilcox.test(sway~group)
##### One-sample t-test #####
price <-c(120, 110, 108, 100, 150, 106, 100, 100, 114, 130, 122, 100, 120, 130, 115, 112, 126, 110, 120, 128)
hist(price)
t.test(price,mu=118)
wilcox.test(price,mu=118)
##### Two-sample t-test #####
Salary <- c(18.9,10.5,	17.5,	13.1,	13.0,	18.2,	22.0,	13.0,	25.0,	12.2,  10.3,15.5,	24.4,	11.8,	15.0,	25.6,	11.8,	22.8,	19.4,	12.3, 22.7,	27.3,	16.0,	11.0,	12.6,	17.7,	17.2, 20.2,	34.0,	36.4,	11.3,	24.0,	17.6,	26.0,	25.7,	17.2,	14.1,	22.0,	17.2,	20.9,	16.8,	19.3,	15.8,	27.0,	20.4,	25.5,	30.1, 28.3,	29.5,	31.6)
Sector<- c(rep(0,25), rep(1,25))
hist(Salary)
hist(Salary[Sector==0])
hist(Salary[Sector==1])
t.test(Salary~Sector, var.equal=TRUE)
t.test(Salary~Sector, var.equal=TRUE)
wilcox.test(Salary)
##### Likelihood #####
aircond <- c(50,44,102,72,22,39,3,15,197,188,79,88,46,5,5,36,22,139,210,97,30,23,13,14)
n <- length(aircond)
theta  <- seq(0.005, 0.025, length = 50)
loglik <- n * log(theta) - theta * sum(aircond)
plot(theta, loglik, type = "l")
abline(h = log(0.10))
abline(h = log(0.1465))
abline(h = log(0.5))
data <- read.csv("dataset11.csv")
setwd("/Users/dxx/Coding/DAS-Group-11/DAS-Group-11")
data <- read.csv("dataset11.csv")
data <- na.omit(data)
data$Qualityclass <- factor(data$Qualityclass, levels = c("Poor", "Good"))
names(data)
str(data)
install.packages("GGally")
install.packages("gt")
library(gt)
install.packages("gridExtra")
library(gridExtra)
install.packages("knitr")
library(knitr)
install.packages("knitr")
install.packages("knitr")
# Read the dataset
data <- read.csv("dataset11.csv")
data <- na.omit(data)
data$Qualityclass <- factor(data$Qualityclass, levels = c("Poor", "Good"))
names(data)
str(data)
# Read the dataset
data <- read.csv("dataset11.csv")
data
data <- na.omit(data)
data$Qualityclass <- factor(data$Qualityclass, levels = c("Poor", "Good"))
names(data)
str(data)
# Scatterplot matrix with ggpairs()
a = data %>%
select(aroma,flavor,acidity,category_two_defects,altitude_mean_meters,Qualityclass)
library(tidyverse)
library(moderndive)
library(gapminder)
library(sjPlot)
library(stats)
library(jtools)
library(GGally)
library(gt)
library(gridExtra)
library(knitr)
install.packages("gridExtra")
install.packages("gridExtra")
library(tidyverse)
library(moderndive)
library(gapminder)
library(sjPlot)
library(stats)
library(jtools)
library(GGally)
library(gt)
library(gridExtra)
library(knitr)
